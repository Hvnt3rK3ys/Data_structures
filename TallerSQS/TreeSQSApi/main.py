from random import randint # Se utiliza en la funcion QueueSQS
from fastapi import FastAPI # Se utiliza en la instanciacion de la aplicacion FastAPI
import multiprocessing # Se utiliza en el endpoint desencolar
import boto3 # Se utiliza en la autenticacion con AWS y conexion con SQS
import uuid # Se utiliza en la funcion QueueSQS

#â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜
'''
Seccion de autenticacion con AWS y conexion con SQS
'''

aws_access_key_idSec = input("Por favor, ingrese su AWS Access Key ID: ")
aws_secret_access_keySec = input("Por favor, ingrese su AWS Secret Access Key: ")
queue_urlSec = input("Por favor, ingrese su AWS SQS Queue URL: ")
region_zoneSec = input("Por favor, ingrese su AWS Region: ")


# Crear un cliente de AWS SQS
sqs = boto3.client(
    'sqs',
    region_name=region_zoneSec,
    aws_access_key_id=aws_access_key_idSec,
    aws_secret_access_key=aws_secret_access_keySec
)

'''
Funcion para extraer la totalidad de mensajes en la cola SQS
'''
def get_SQS_length():
    response = sqs.get_queue_attributes(
        QueueUrl=queue_urlSec,
        AttributeNames=['ApproximateNumberOfMessages']
    )
    return int(response['Attributes'].get('ApproximateNumberOfMessages', 0))




#â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜
'''
Funcion para encolar mensajes en la cola SQS
'''

def QueueSQS(cantidad_mensajes:int):
    consumirCola = list()
    # Publicar un mensaje en la cola
    for i in range(0, cantidad_mensajes):
        response = sqs.send_message(
            QueueUrl=queue_urlSec,
            MessageBody= f'{randint(0, cantidad_mensajes)}', #Expected 1m maximum free tier
            MessageGroupId='pagos',
            MessageDeduplicationId=str(uuid.uuid4())
        )
        consumirCola.append(response["MessageId"])
    return consumirCola


#â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜

'''
Funcion para desencolar mensajes de la cola SQS
'''

def DequeueSQS():
    # Recibir mensajes de la cola
    response = sqs.receive_message(
        QueueUrl=queue_urlSec,
        AttributeNames=[
            'All'
        ],
        MessageAttributeNames=[
            'All'
        ],
        MaxNumberOfMessages=1,
        VisibilityTimeout=30,
        WaitTimeSeconds=0
    )
    #print(response)
    if response.get('Messages'):
        message = response['Messages']
        print(f"Mensaje recibido: {message[0]['Body']}")
        sqs.delete_message(
            QueueUrl=queue_urlSec,
            ReceiptHandle=message[0]['ReceiptHandle']
        )
        return message[0]['Body']
    else:
        print("No se encontraron mensajes en la cola.")
    sqs.close()


#â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜

'''
FunciÃ³n para generar el Ã¡rbol binario con los datos recibidos de la cola

Clase TreeNode:
    Esta clase representa un nodo en un Ã¡rbol binario. Cada nodo tiene un valor y dos hijos: izquierdo y derecho.

FunciÃ³n insert_in_binary_tree(root, value):
    Esta funciÃ³n inserta un nuevo valor en el Ã¡rbol binario. La inserciÃ³n se realiza en el nivel mÃ¡s bajo posible y hacia la izquierda. 
    Si la raÃ­z es None, se crea un nuevo TreeNode con el valor proporcionado. 
    Si la raÃ­z no es None, se utiliza una cola para recorrer el Ã¡rbol y encontrar el lugar adecuado para la inserciÃ³n.

FunciÃ³n create_binary_tree(linearConsumer: list):
    Esta funciÃ³n crea un Ã¡rbol binario a partir de una lista de valores (linearConsumer). 
    El primer elemento de la lista se convierte en la raÃ­z del Ã¡rbol, y los elementos restantes se insertan en el Ã¡rbol en el orden en que aparecen en la lista.

FunciÃ³n tree_to_dict(node):
    Esta funciÃ³n convierte un Ã¡rbol binario en un diccionario para facilitar su visualizaciÃ³n y manipulaciÃ³n. 
    Cada nodo del Ã¡rbol se convierte en una clave en el diccionario, y los hijos izquierdo y derecho del nodo se convierten en sub-diccionarios.
'''

class TreeNode:
    def __init__(self, value):
        self.value = value  # Crea un nodo con un valor
        self.left = None  # Inicializa el hijo izquierdo como None
        self.right = None  # Inicializa el hijo derecho como None

def insert_in_binary_tree(root, value):
    if root is None:  # Si no hay raÃ­z, crea un nuevo nodo con el valor
        return TreeNode(value)
    queue = [root]  # Crea una cola con la raÃ­z
    while queue:  # Mientras haya nodos en la cola
        node = queue.pop(0)  # Saca el primer nodo de la cola
        if not node.left:  # Si no hay hijo izquierdo, crea uno con el valor
            node.left = TreeNode(value)
            return
        else:
            queue.append(node.left)  # Agrega el hijo izquierdo a la cola
        if not node.right:  # Si no hay hijo derecho, crea uno con el valor
            node.right = TreeNode(value)
            return
        else:
            queue.append(node.right)  # Agrega el hijo derecho a la cola

def create_binary_tree(linearConsumer: list):
    if not linearConsumer:  # Si la lista estÃ¡ vacÃ­a, devuelve None
        return None
    root = TreeNode(linearConsumer[0])  # Crea la raÃ­z con el primer elemento
    for value in linearConsumer[1:]:  # Itera sobre el resto de la lista
        insert_in_binary_tree(root, value)  # Inserta cada valor en el Ã¡rbol
    return root  # Devuelve la raÃ­z del Ã¡rbol

def tree_to_dict(node):
    if not node:  # Si no hay nodo, devuelve None
        return None
    return {  # Crea un diccionario con la informaciÃ³n del nodo
        'value': node.value,  # Valor del nodo
        'left': tree_to_dict(node.left),  # Recursivamente crea el hijo izquierdo
        'right': tree_to_dict(node.right)  # Recursivamente crea el hijo derecho
    }

#â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜

'''
Instanciacion de la aplicacion FastAPI
'''
app = FastAPI()


@app.get("/")
def read_root():
    return {"message": "Welcome to the SQS api"}

'''
Endpoint para enviar mensajes a SQS
'''
@app.post("/encolar")
async def encolar(cantidad_enviada: dict):
    consumo = QueueSQS(cantidad_enviada["cantidad_mensajes"])
    return {
        "queue_messages": consumo,
        "queue_quantity": len(consumo)
    }

'''
Endpoint para recibir mensajes de SQS
'''

# Resolver llamado dinamico a SQS para preguntar la longitud maxima de la cola
@app.get("/desencolar")
async def desencolar(cantidad_enviada: dict):
    # Obtener el nÃºmero de workers mÃ¡ximos segÃºn el nÃºmero de CPU cores
    max_workers = multiprocessing.cpu_count()
    # Obtener la longitud de la cola de SQS
    maxlength = get_SQS_length()
    # Crear una lista de consumidores lineales
    linearConsumer = []
    # Procesar los mensajes por lotes
    batch_size = min(maxlength, max_workers)
    for _ in range(0, maxlength, batch_size):
        batch = []
        for _ in range(batch_size):
            batch.append(DequeueSQS())
        # Agregar el lote de mensajes a la lista de consumidores lineales
        linearConsumer.extend(batch)
    # Crear un Ã¡rbol binario a partir de la lista de consumidores lineales
    binary_tree_root = create_binary_tree(linearConsumer)
    # Convertir el Ã¡rbol binario a un diccionario
    binary_tree_dict = tree_to_dict(binary_tree_root)
    # Devolver la respuesta con la lista de consumidores, la cantidad de mensajes y el Ã¡rbol binario
    return {
        "dequeue_messages": linearConsumer,
        "dequeue_quantity": len(linearConsumer),
        "generated_tree ðŸŒ²": binary_tree_dict
    }


#â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜â«˜


# Punto de entrada para iniciar la aplicaciÃ³n
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)